plugins {
    id "io.github.pacifistmc.forgix" version "1.2.9"
    id 'fabric-loom' version '1.6-SNAPSHOT' apply(false)
    id 'net.minecraftforge.gradle' version '[6.0,6.2)' apply(false)
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT' apply(false)
    id("org.spongepowered.mixin") version "0.7-SNAPSHOT" apply(false)
}

forgix {
    group = "${rootProject.mod_group_id}.${rootProject.mod_id}"
    mergedJarName = "${rootProject.archives_base_name}-NeoQuiFab-${rootProject.mod_version}.jar"
	outputDir = "neoquifab/build/libs"
	version = '${rootProject.mod_version}'
	
	neoforge {
		projectName = "neoforge"
		jarLocation = "build/libs/neoforge.jar"
		additionalRelocate("com.kittehmod.ceilands", "com.kittehmod.ceilands.neoforge")
	}
	fabric {
		projectName = "fabric"
		jarLocation = "build/libs/fabric.jar"
		additionalRelocate("com.kittehmod.ceilands", "com.kittehmod.ceilands.fabric")
	}
}

subprojects {
    apply plugin: 'java'

    java.toolchain.languageVersion = JavaLanguageVersion.of(21)
    java.withSourcesJar()
    java.withJavadocJar()
        
    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : archives_base_name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : project.minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (JEI / CraftTweaker / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
		maven { url "https://maven.parchmentmc.org" }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(21)
    }

    processResources {
        def expandProps = [
			"version": mod_version,
			"group": project.group, //Else we target the task's group.
			"minecraft_version": rootProject.minecraft_version,
			"neoforge_version": neoforge_version,
			"neoforge_version_range": neoforge_version_range,
			"minecraft_version_range": minecraft_version_range,
			"fabric_version": fabric_api_version,
			"fabric_loader_version": fabric_loader_version,
			"mod_name": mod_name,
			"mod_author":mod_authors,
			"mod_id": mod_id,
			"license": mod_license,
			"description": mod_description
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
            expand(expandProps) {
			    setEscapeBackslash(true)
			}
        }
		
        inputs.properties(expandProps)
    }

    // Disables Gradle's custom module metadata from being published to maven. 
	// The metadata includes mapped dependencies which are not reasonably consumable by other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }
}
plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.+'
}

archivesBaseName = "neoforge" // "${rootProject.archives_base_name}-${project.name}"

repositories {
	maven { 
	    url "https://cursemaven.com"
        content { includeGroup "curse.maven" }
	}
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
}

minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
	    workingDirectory project.file('run')
	    systemProperty 'mixin.env.disableRefMap', 'true'
        modSource project.sourceSets.main
    }	
	client {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}
	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    implementation("net.neoforged:neoforge:${project.neoforge_version}")
    compileOnly project(":common")
    implementation "curse.maven:the-twilight-forest-227639:5699076"
	implementation "curse.maven:farmers-delight-398521:5566383"
}

TaskCollection.metaClass.excludingNeoTasks = { ->
    delegate.matching { !it.name.startsWith("neo") }
}

tasks.withType(JavaCompile).excludingNeoTasks().configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).excludingNeoTasks().configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).excludingNeoTasks().configureEach {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
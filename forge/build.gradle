plugins {
    id 'idea'
	id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
}
base {
    archivesBaseName = "forge" // "${rootProject.archives_base_name}-${project.name}"
}
mixin {
    // Only uncomment if you need to generate the refmap. Remember to edit the refmap for the merged JAR file!
    if (!file('src/main/resources/${rootProject.mod_id}_forge.refmap.json').exists()) {
        add(sourceSets.main, "${rootProject.mod_id}_forge.refmap.json")
    }
}
minecraft {
    mappings channel: 'official', version: rootProject.minecraft_version
	copyIdeResources = true //Calls processResources when in dev
    if (project(":common").file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = project(":common").file('src/main/resources/META-INF/accesstransformer.cfg')
    }
    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'runClient'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=" + "ceilands.mixins.json"
            arg "-mixin.config=" + "ceilands_forge.mixins.json"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'runServer'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=" + "ceilands.mixins.json"
            arg "-mixin.config=" + "ceilands_forge.mixins.json"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'runData'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
	maven { 
	    url "https://cursemaven.com"
        content { includeGroup "curse.maven" }
	}
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    compileOnly project(":common")
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
    implementation fg.deobf("curse.maven:blueprint-382216:5292242")
    implementation fg.deobf("curse.maven:woodworks-543610:5292418")
    implementation fg.deobf("curse.maven:boatload-337396:5292325")
    implementation fg.deobf("curse.maven:farmers-delight-398521:5051242")
    implementation fg.deobf("curse.maven:the-twilight-forest-227639:5071019")
    implementation fg.deobf("curse.maven:farlands-reborn-909515:4847560")
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            fg.component(it)
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
